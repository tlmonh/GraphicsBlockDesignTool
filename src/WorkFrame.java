import java.awt.Image;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.print.Printable;
import javax.swing.*;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.awt.print.PageFormat;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.AbstractAction;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.JRootPane;
import javax.swing.KeyStroke;

/***************************************************************
* file: WorkFrame.java
* author: Timothy Monh
* class: CS 245 - Program Graphical User Interfaces
*
* assignment: 2
* date last modified: 3/11
*
* purpose: To create a palette that allows a user to add lines, strings, ect on the 9 divided panels
*
****************************************************************/
public class WorkFrame extends javax.swing.JFrame {
    //for pageFormat
    PrinterJob job;
    PageFormat pf;
    private static WorkFrame theApp;
    //create background image for app
    BufferedImage image;
    private int xPic;
    private int yPic;
    //setting different variables for the options, allow for separate print outs
    private LineEntry s;
    private LineEntry l;
    private LineEntry r;
    private LineEntry e;
    private LineEntry c;

    JPanel[] aPanel;
    //set booleans for allowing buttons to function
    private boolean line;
    private boolean string;
    private String input;//holds string data for text
    private boolean ellipse;
    private boolean rect;
    private boolean curve;
    private boolean lineAdd;
    private boolean stringAdd;
    private boolean ellipseAdd;
    private boolean rectAdd;
    private boolean curveAdd;
    private boolean[] printString;
    private boolean[] printLine;
    private boolean[] printEllipse;
    private boolean[] printRect;
    private boolean[] printCurve;
    //Coordinate markers
    private int xPt;
    private int yPt;
    private int xPt2;
    private int yPt2;
    //Exclusive for Curve point
    private boolean afterPt2;
    private boolean afterPt3;
    private int xf,yf;//hold place of xPt and yPt
    private int xPt3;
    private int yPt3;
    private boolean set;

    /** Creates new form WorkFrame */
    public WorkFrame() {
        //initializing coordinates and switch sets

        printString = new boolean[10];
        printRect = new boolean[10];
        printLine = new boolean[10];
        printCurve = new boolean[10];
        printEllipse = new boolean[10];
        r = new LineEntry();
        e = new LineEntry();
        c = new LineEntry();
        s = new LineEntry();
        l = new LineEntry();
            xPt = 0;
            yPt = 0;
            xPt2 = 0;
            yPt2 = 0;
            xPt3 = 0;
            yPt3 = 0;
            xf = 0;
            yf = 0;
        set = true;
        //initializing booleans
        for(int i = 0; i< 10;i++){
            printString[i] = false;
            printRect[i] = false;
            printCurve[i] = false;
            printLine[i] = false;
            printEllipse[i] = false;
        }
             string = false;
             line = false;
             rect = false;
             curve = false;
             ellipse = false;

            lineAdd = false;
            stringAdd = false;
            ellipseAdd = false;
            rectAdd = false;
            curveAdd = false;
            afterPt3 = false;
            afterPt2 = false;
        //Creating new panels based on PE lecture
        initComponents();
        try {
            this.setFaviCon();
        } catch (IOException ex) {
            Logger.getLogger(WorkFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.SetKeyPresses();
        this.getContentPane().setBackground(new Color(104,153,204));//sets jframe background color
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        textButton = new javax.swing.JButton();
        ellipseButton = new javax.swing.JButton();
        rectButton = new javax.swing.JButton();
        curveButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        mainPanel = new javax.swing.JPanel()
        {
            protected void paintComponent(Graphics g)
            {
                super.paintComponent(g);
                g.drawImage(image, xPic,yPic, this);
            }

        };
        paintPanel = new javax.swing.JLayeredPane();
        p1 = new javax.swing.JPanel()
        {
            protected void paintComponent(Graphics g)
            {
                super.paintComponent(g);
                if(printString[0] == true){
                    System.out.println("Curve created");
                    s.paintText(g,input);
                }
                if(printLine[0] == true){
                    l.paintLine(g);
                }
                if(printEllipse[0] == true){
                    e.paintEllipse(g);
                }
                if(printRect[0] == true){
                    r.paintRect(g);
                }
                if(printCurve[0] == true){
                    c.paintCurve(g);
                    System.out.println("Curve created");
                }
            }

        };
        p4 = new javax.swing.JPanel()
        {
            protected void paintComponent(Graphics g)
            {
                super.paintComponent(g);
                if(printString[3] == true){
                    s.paintText(g,input);
                }
                if(printLine[3] == true){
                    l.paintLine(g);
                }
                if(printEllipse[3] == true){
                    e.paintEllipse(g);
                }
                if(printRect[3] == true){
                    r.paintRect(g);
                }
                if(printCurve[3] == true){
                    c.paintCurve(g);
                    System.out.println("Curve created");
                }
            }

        };
        p7 = new javax.swing.JPanel()
        {
            protected void paintComponent(Graphics g)
            {
                super.paintComponent(g);
                if(printString[6] == true){
                    s.paintText(g,input);
                }
                if(printLine[6] == true){
                    l.paintLine(g);
                }
                if(printEllipse[6] == true){
                    e.paintEllipse(g);
                }
                if(printRect[6] == true){
                    r.paintRect(g);
                }
                if(printCurve[6] == true){
                    c.paintCurve(g);
                    System.out.println("Curve created");
                }
            }

        };
        p2 = new javax.swing.JPanel()
        {
            protected void paintComponent(Graphics g)
            {
                super.paintComponent(g);
                if(printString[1] == true){
                    s.paintText(g,input);
                }
                if(printLine[1] == true){
                    l.paintLine(g);
                }
                if(printEllipse[1] == true){
                    e.paintEllipse(g);
                }
                if(printRect[1] == true){
                    r.paintRect(g);
                }
                if(printCurve[1] == true){
                    c.paintCurve(g);
                    System.out.println("Curve created");
                }
            }

        };
        p5 = new javax.swing.JPanel()
        {
            protected void paintComponent(Graphics g)
            {
                super.paintComponent(g);
                if(printString[4] == true){
                    s.paintText(g,input);
                }
                if(printLine[4] == true){
                    l.paintLine(g);
                }
                if(printEllipse[4] == true){
                    e.paintEllipse(g);
                }
                if(printRect[4] == true){
                    r.paintRect(g);
                }
                if(printCurve[4] == true){
                    c.paintCurve(g);
                    System.out.println("Curve created");
                }
            }

        };
        p8 = new javax.swing.JPanel()
        {
            protected void paintComponent(Graphics g)
            {
                super.paintComponent(g);
                if(printString[7] == true){
                    s.paintText(g,input);
                }
                if(printLine[7] == true){
                    l.paintLine(g);
                }
                if(printEllipse[7] == true){
                    e.paintEllipse(g);
                }
                if(printRect[7] == true){
                    r.paintRect(g);
                }
                if(printCurve[7] == true){
                    c.paintCurve(g);
                    System.out.println("Curve created");
                }
            }

        };
        p3 = new javax.swing.JPanel()
        {
            protected void paintComponent(Graphics g)
            {
                super.paintComponent(g);
                if(printString[2] == true){
                    s.paintText(g,input);
                }
                if(printLine[2] == true){
                    l.paintLine(g);
                }
                if(printEllipse[2] == true){
                    e.paintEllipse(g);
                }
                if(printRect[2] == true){
                    r.paintRect(g);
                }
                if(printCurve[2] == true){
                    c.paintCurve(g);
                    System.out.println("Curve created");
                }
            }

        };
        p6 = new javax.swing.JPanel()
        {
            protected void paintComponent(Graphics g)
            {
                super.paintComponent(g);
                if(printString[5] == true){
                    s.paintText(g,input);
                }
                if(printLine[5] == true){
                    l.paintLine(g);
                }
                if(printEllipse[5] == true){
                    e.paintEllipse(g);
                }
                if(printRect[5] == true){
                    r.paintRect(g);
                }
                if(printCurve[5] == true){
                    c.paintCurve(g);
                    System.out.println("Curve created");
                }
            }

        };
        p9 = new javax.swing.JPanel()
        {
            protected void paintComponent(Graphics g)
            {
                super.paintComponent(g);
                if(printString[8] == true){
                    s.paintText(g,input);
                }
                if(printLine[8] == true){
                    l.paintLine(g);
                }
                if(printEllipse[8] == true){
                    e.paintEllipse(g);
                }
                if(printRect[8] == true){
                    r.paintRect(g);
                }
                if(printCurve[8] == true){
                    c.paintCurve(g);
                    System.out.println("Curve created");
                }
            }

        };
        lineButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        PageButton = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenuItem11 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Graphics Block Design");

        textButton.setFont(new java.awt.Font("Comic Sans MS", 0, 11));
        textButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TextButton.png"))); // NOI18N
        textButton.setToolTipText("Click and enter text to place text in any panel");
        textButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                textButtonMouseClicked(evt);
            }
        });
        textButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textButtonActionPerformed(evt);
            }
        });

        ellipseButton.setFont(new java.awt.Font("Comic Sans MS", 0, 11));
        ellipseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/EllipseButton.png"))); // NOI18N
        ellipseButton.setToolTipText("Click here to draw an ellipse in any panel\n");
        ellipseButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ellipseButtonMouseClicked(evt);
            }
        });
        ellipseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ellipseButtonActionPerformed(evt);
            }
        });

        rectButton.setFont(new java.awt.Font("Comic Sans MS", 0, 11));
        rectButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/RectButton.png"))); // NOI18N
        rectButton.setToolTipText("Click here to draw rectangle in any panel\n");
        rectButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rectButtonMouseClicked(evt);
            }
        });
        rectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rectButtonActionPerformed(evt);
            }
        });

        curveButton.setFont(new java.awt.Font("Comic Sans MS", 0, 11));
        curveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/CurveButton.png"))); // NOI18N
        curveButton.setToolTipText("Click here to draw curve along any panel");
        curveButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                curveButtonMouseClicked(evt);
            }
        });
        curveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                curveButtonActionPerformed(evt);
            }
        });

        exitButton.setFont(new java.awt.Font("Comic Sans MS", 0, 11));
        exitButton.setText("Exit");
        exitButton.setToolTipText("Click here to exit the program");
        exitButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exitButtonMouseClicked(evt);
            }
        });
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        mainPanel.setBackground(new java.awt.Color(255, 255, 255));
        mainPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        mainPanel.setToolTipText("Background panel for drawing panels");
        mainPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mainPanelMouseClicked(evt);
            }
        });

        p1.setBackground(new java.awt.Color(204, 204, 255));
        p1.setToolTipText("Panel 1");
        p1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                p1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout p1Layout = new javax.swing.GroupLayout(p1);
        p1.setLayout(p1Layout);
        p1Layout.setHorizontalGroup(
            p1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 130, Short.MAX_VALUE)
        );
        p1Layout.setVerticalGroup(
            p1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 110, Short.MAX_VALUE)
        );

        p1.setBounds(0, 0, 130, 110);
        paintPanel.add(p1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        p4.setBackground(new java.awt.Color(204, 204, 255));
        p4.setToolTipText("Panel 4");
        p4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                p4MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout p4Layout = new javax.swing.GroupLayout(p4);
        p4.setLayout(p4Layout);
        p4Layout.setHorizontalGroup(
            p4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 130, Short.MAX_VALUE)
        );
        p4Layout.setVerticalGroup(
            p4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 110, Short.MAX_VALUE)
        );

        p4.setBounds(0, 110, 130, 110);
        paintPanel.add(p4, javax.swing.JLayeredPane.DEFAULT_LAYER);

        p7.setBackground(new java.awt.Color(204, 204, 255));
        p7.setToolTipText("Panel 7");
        p7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                p7MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout p7Layout = new javax.swing.GroupLayout(p7);
        p7.setLayout(p7Layout);
        p7Layout.setHorizontalGroup(
            p7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 130, Short.MAX_VALUE)
        );
        p7Layout.setVerticalGroup(
            p7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 110, Short.MAX_VALUE)
        );

        p7.setBounds(0, 210, 130, 110);
        paintPanel.add(p7, javax.swing.JLayeredPane.DEFAULT_LAYER);

        p2.setBackground(new java.awt.Color(204, 204, 255));
        p2.setToolTipText("Panel 2");
        p2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                p2MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout p2Layout = new javax.swing.GroupLayout(p2);
        p2.setLayout(p2Layout);
        p2Layout.setHorizontalGroup(
            p2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 130, Short.MAX_VALUE)
        );
        p2Layout.setVerticalGroup(
            p2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 110, Short.MAX_VALUE)
        );

        p2.setBounds(130, 0, 130, 110);
        paintPanel.add(p2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        p5.setBackground(new java.awt.Color(204, 204, 255));
        p5.setToolTipText("Panel 5");
        p5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                p5MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout p5Layout = new javax.swing.GroupLayout(p5);
        p5.setLayout(p5Layout);
        p5Layout.setHorizontalGroup(
            p5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 130, Short.MAX_VALUE)
        );
        p5Layout.setVerticalGroup(
            p5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 110, Short.MAX_VALUE)
        );

        p5.setBounds(130, 110, 130, 110);
        paintPanel.add(p5, javax.swing.JLayeredPane.DEFAULT_LAYER);

        p8.setBackground(new java.awt.Color(204, 204, 255));
        p8.setToolTipText("Panel 8");
        p8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                p8MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout p8Layout = new javax.swing.GroupLayout(p8);
        p8.setLayout(p8Layout);
        p8Layout.setHorizontalGroup(
            p8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 130, Short.MAX_VALUE)
        );
        p8Layout.setVerticalGroup(
            p8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        p8.setBounds(130, 220, 130, 100);
        paintPanel.add(p8, javax.swing.JLayeredPane.DEFAULT_LAYER);

        p3.setBackground(new java.awt.Color(204, 204, 255));
        p3.setToolTipText("Panel 3");
        p3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                p3MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout p3Layout = new javax.swing.GroupLayout(p3);
        p3.setLayout(p3Layout);
        p3Layout.setHorizontalGroup(
            p3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 130, Short.MAX_VALUE)
        );
        p3Layout.setVerticalGroup(
            p3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 110, Short.MAX_VALUE)
        );

        p3.setBounds(260, 0, 130, 110);
        paintPanel.add(p3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        p6.setBackground(new java.awt.Color(204, 204, 255));
        p6.setToolTipText("Panel 6");
        p6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                p6MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout p6Layout = new javax.swing.GroupLayout(p6);
        p6.setLayout(p6Layout);
        p6Layout.setHorizontalGroup(
            p6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 130, Short.MAX_VALUE)
        );
        p6Layout.setVerticalGroup(
            p6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 110, Short.MAX_VALUE)
        );

        p6.setBounds(260, 110, 130, 110);
        paintPanel.add(p6, javax.swing.JLayeredPane.DEFAULT_LAYER);

        p9.setBackground(new java.awt.Color(204, 204, 255));
        p9.setToolTipText("Panel 9");
        p9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                p9MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout p9Layout = new javax.swing.GroupLayout(p9);
        p9.setLayout(p9Layout);
        p9Layout.setHorizontalGroup(
            p9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 130, Short.MAX_VALUE)
        );
        p9Layout.setVerticalGroup(
            p9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        p9.setBounds(260, 220, 130, 100);
        paintPanel.add(p9, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(paintPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 379, Short.MAX_VALUE)
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(paintPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        lineButton.setFont(new java.awt.Font("Comic Sans MS", 0, 11));
        lineButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/LineButton.png"))); // NOI18N
        lineButton.setToolTipText("Click here to paint lines along a panel");
        lineButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lineButtonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lineButtonMouseEntered(evt);
            }
        });
        lineButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lineButtonActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        PageButton.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        PageButton.setText("PageFormat");
        PageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PageButtonActionPerformed(evt);
            }
        });
        jMenu1.add(PageButton);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText("Print");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setText("PrintGUI");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setText("ExitApplication");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Tools");

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem5.setText("DrawText");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem5);

        jMenuItem6.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem6.setText("DrawLine");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem6);

        jMenuItem7.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem7.setText("DrawEllipse");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem7);

        jMenuItem8.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem8.setText("DrawRect");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem8);

        jMenuItem9.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem9.setText("DrawCurve");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem9);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Help");
        jMenu3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu3ActionPerformed(evt);
            }
        });

        jMenuItem10.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem10.setText("Project Help");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem10);

        jMenuItem11.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem11.setText("About");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem11);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(exitButton)
                        .addComponent(textButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, Short.MAX_VALUE))
                    .addComponent(lineButton, javax.swing.GroupLayout.Alignment.TRAILING, 0, 0, Short.MAX_VALUE)
                    .addComponent(ellipseButton, javax.swing.GroupLayout.Alignment.TRAILING, 0, 0, Short.MAX_VALUE)
                    .addComponent(rectButton, javax.swing.GroupLayout.Alignment.TRAILING, 0, 0, Short.MAX_VALUE)
                    .addComponent(curveButton, 0, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addComponent(textButton, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lineButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ellipseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(curveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                        .addComponent(exitButton))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
     //rest values when button is pressed
    private void resetValues(){
        xPt = 0;
        yPt = 0;
        xPt2 = 0;
        yPt2 = 0;
        xPt3 = 0;
        yPt3 = 0;
        xf = 0;
        yf = 0;
        afterPt3 = false;
        afterPt2 = false;
        set = true;
    }
    //Centering the panel
    private void center()
    {
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension us = this.getSize();
        int x = (screen.width - us.width) / 2;
        int y = (screen.height - us.height) / 2;
        this.setLocation(x,y);
    }
     //set favicon of the application
    private void setFaviCon() throws IOException{
        Image img = ImageIO.read(this.getClass().getResource("HappyMan copy.png"));
        this.setIconImage(img);

    }
//Setting general key bindings
     private void SetKeyPresses()
    {
        JRootPane rootPane = this.getRootPane();
        InputMap iMap = rootPane.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        iMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), "escape");

        ActionMap aMap = rootPane.getActionMap();
        aMap.put("escape", new AbstractAction(){
            public void actionPerformed(ActionEvent arg0) {
                dispose();
            }});
        InputMap fMap = rootPane.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        iMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_F1, 0), "Info");

        ActionMap aMapF = rootPane.getActionMap();
        aMapF.put("Info", new AbstractAction(){
            public void actionPerformed(ActionEvent arg0){
                JOptionPane.showMessageDialog(null, "Timothy L. Monh\n#007656116\nGraphicsBlockDesignToolApplication\nWinter Quarter 2010");
        }});
    }
    private void ellipseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ellipseButtonActionPerformed
         if(ellipse == true)
        {
             resetValues();
             JOptionPane.showMessageDialog(null, "Ellipse in-print is now deleted.");
            ellipse = false;
            for(int i = 0;i<10;i++){
                printEllipse[i] = false;
            }
            paintPanel.repaint();
        }
        else
        {
             resetValues();
            ellipse = true;
            ellipseAdd = true;
        }
    }//GEN-LAST:event_ellipseButtonActionPerformed

    private void mainPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mainPanelMouseClicked
        
    }//GEN-LAST:event_mainPanelMouseClicked

    private void lineButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lineButtonMouseClicked
       

    }//GEN-LAST:event_lineButtonMouseClicked

    private void exitButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitButtonMouseClicked
        System.exit(0);
    }//GEN-LAST:event_exitButtonMouseClicked

    private void textButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_textButtonMouseClicked
        
    }//GEN-LAST:event_textButtonMouseClicked

    private void rectButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rectButtonMouseClicked
        
    }//GEN-LAST:event_rectButtonMouseClicked

    private void ellipseButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ellipseButtonMouseClicked
        
    }//GEN-LAST:event_ellipseButtonMouseClicked

    private void curveButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_curveButtonMouseClicked
       
    }//GEN-LAST:event_curveButtonMouseClicked

    private void textButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textButtonActionPerformed
        if(string == true)
        {
            resetValues();
            JOptionPane.showMessageDialog(null, "Text in-print is now deleted.");
            string = false;
            for(int i = 0;i<10;i++){
                printString[i] = false;
            }
            paintPanel.repaint();
        }
        else
        {
            resetValues();
            input = JOptionPane.showInputDialog("Input text to place in panel.");
            string = true;
            stringAdd = true;
        }
    }//GEN-LAST:event_textButtonActionPerformed

    private void lineButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lineButtonMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_lineButtonMouseEntered

    private void lineButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lineButtonActionPerformed
        if(line == true)
        {
            resetValues();
            JOptionPane.showMessageDialog(null, "Line in-print is now deleted.");
            line = false;
            for(int i = 0;i<10;i++){
                printLine[i] = false;
            }
            paintPanel.repaint();
        }
        else
        {
            resetValues();
            line = true;
            lineAdd = true;
        }
    }//GEN-LAST:event_lineButtonActionPerformed

    private void p1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_p1MouseClicked
        System.out.println("p1 click");
        int x,y;
        x = evt.getX();
        y = evt.getY();
        if( set == true)
        {
            xPt = evt.getX();
            yPt = evt.getY();
            set = false;
            if(afterPt2 == false){
                xf = xPt;
                yf = yPt;
            }
            else if(afterPt2 == true){
                xPt3 = x;
                yPt3 = y;
                afterPt3 = true;
            }
        }
        else
        {
            xPt2 = evt.getX();
            yPt2 = evt.getY();
            set = true;
            afterPt2 = true;
        }
        if(string == true){
            System.out.println("String passes");
           if(stringAdd == true)
           {
             s = new LineEntry(x,y,0,0);
            stringAdd = false;
            printString[0] = true;
            resetValues();
            }
        }
        if(line == true ){
            if(xPt2 != 0 || yPt2 !=0)
            {
                if(lineAdd == true)
                {
                    l = new LineEntry(xPt,yPt,xPt2,yPt2);
                    lineAdd = false;
                    printLine[0] = true;
                    resetValues();
                }
            }
        }
        if(rect == true){
            if(xPt2 != 0 || yPt2 !=0){
                if(rectAdd == true)
                {
                    r = new LineEntry(xPt,yPt,xPt2,yPt2);
                    rectAdd = false;
                    printRect[0] = true;
                    resetValues();
                }
            }
        }
        if(ellipse == true){
            if(xPt2 != 0 || yPt2 !=0){
                 if(ellipseAdd == true)
                {
                    e = new LineEntry(xPt,yPt,xPt2,yPt2);
                    ellipseAdd = false;
                    printEllipse[0] = true;
                    resetValues();
                 }
            }
        }
        if(curve == true){
                if(curveAdd == true){
                    if(afterPt3 == true){
                        if(xPt3 != 0 || xPt3 != 0){
                        c = new LineEntry(xf,yf,xPt2,yPt2,xPt3,yPt3);
                        curveAdd = false;
                        printCurve[0] = true;
                        resetValues();
                        }
                    }
                }
        }
        paintPanel.repaint();
    }//GEN-LAST:event_p1MouseClicked

    private void p2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_p2MouseClicked
        System.out.println("p2 click");
        
        int x,y;
        x = evt.getX();
        y = evt.getY();
        if( set == true)
        {
            xPt = evt.getX();
            yPt = evt.getY();
            set = false;
            if(afterPt2 == false){
                xf = xPt;
                yf = yPt;
            }
            else if(afterPt2 == true){
                xPt3 = x;
                yPt3 = y;
                afterPt3 = true;
            }
        }
        else
        {
            xPt2 = evt.getX();
            yPt2 = evt.getY();
            set = true;
            afterPt2 = true;
        }
        if(string == true){
           if(stringAdd == true)
           {
             s = new LineEntry(x,y,0,0);
            stringAdd = false;
            printString[1] = true;
            resetValues();
            }
        }
        if(line == true ){
            if(xPt2 != 0 || yPt2 !=0)
            {
                if(lineAdd == true)
                {
                    l = new LineEntry(xPt,yPt,xPt2,yPt2);
                    lineAdd = false;
                    printLine[1] = true;
                    resetValues();
                }
            }
        }
        if(rect == true){
            if(xPt2 != 0 || yPt2 !=0){
                if(rectAdd == true)
                {
                    r = new LineEntry(xPt,yPt,xPt2,yPt2);
                    rectAdd = false;
                    printRect[1] = true;
                    resetValues();
                }
            }
        }
        if(ellipse == true){
            if(xPt2 != 0 || yPt2 !=0){
                 if(ellipseAdd == true)
                {
                    e = new LineEntry(xPt,yPt,xPt2,yPt2);
                    ellipseAdd = false;
                    printEllipse[1] = true;
                    resetValues();
                 }
            }
        }
        if(curve == true){
                if(curveAdd == true){
                    if(afterPt3 == true){
                        if(xf != 0 || yf != 0){
                        c = new LineEntry(xf,yf,xPt2,yPt2,xPt3,yPt3);
                        curveAdd = false;
                        printCurve[1] = true;
                        resetValues();
                        }
                    }
                }
        }
        paintPanel.repaint();
    }//GEN-LAST:event_p2MouseClicked

    private void p3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_p3MouseClicked
        System.out.println("p3 click");
        
        int x,y;
        x = evt.getX();
        y = evt.getY();
        if( set == true)
        {
            xPt = evt.getX();
            yPt = evt.getY();
            set = false;
            if(afterPt2 == false){
                xf = xPt;
                yf = yPt;
            }
            else if(afterPt2 == true){
                xPt3 = x;
                yPt3 = y;
                afterPt3 = true;
            }
        }
        else
        {
            xPt2 = evt.getX();
            yPt2 = evt.getY();
            set = true;
            afterPt2 = true;
        }
        if(string == true){
           if(stringAdd == true)
           {
             s = new LineEntry(x,y,0,0);
            stringAdd = false;
            printString[2] = true;
            resetValues();
            }
        }
        if(line == true ){
            if(xPt2 != 0 || yPt2 !=0)
            {
                if(lineAdd == true)
                {
                    l = new LineEntry(xPt,yPt,xPt2,yPt2);
                    lineAdd = false;
                    printLine[2] = true;
                    resetValues();
                }
            }
        }
        if(rect == true){
            if(xPt2 != 0 || yPt2 !=0){
                if(rectAdd == true)
                {
                    r = new LineEntry(xPt,yPt,xPt2,yPt2);
                    rectAdd = false;
                    printRect[2] = true;
                    resetValues();

                }
            }
        }
        if(ellipse == true){
            if(xPt2 != 0 || yPt2 !=0){
                 if(ellipseAdd == true)
                {
                    e = new LineEntry(xPt,yPt,xPt2,yPt2);
                    ellipseAdd = false;
                    printEllipse[2] = true;
                    resetValues();
                 }
            }
        }
        if(curve == true){
                if(curveAdd == true){
                    if(afterPt3 == true){
                        if(xf != 0 || yf != 0){
                        c = new LineEntry(xf,yf,xPt2,yPt2,xPt3,yPt3);
                        curveAdd = false;
                        printCurve[2] = true;
                        resetValues();
                        }
                    }
                }
        }
        paintPanel.repaint();
    }//GEN-LAST:event_p3MouseClicked

    private void p4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_p4MouseClicked
        System.out.println("p4 click");
        
        int x,y;
        x = evt.getX();
        y = evt.getY();
        if( set == true)
        {
            xPt = evt.getX();
            yPt = evt.getY();
            set = false;
            if(afterPt2 == false){
                xf = xPt;
                yf = yPt;
            }
            else if(afterPt2 == true){
                xPt3 = x;
                yPt3 = y;
                afterPt3 = true;
            }
        }
        else
        {
            xPt2 = evt.getX();
            yPt2 = evt.getY();
            set = true;
            afterPt2 = true;
        }
        if(string == true){
           if(stringAdd == true)
           {
             s = new LineEntry(x,y,0,0);
            stringAdd = false;
            printString[3] = true;
            resetValues();
            }
        }
        if(line == true ){
            if(xPt2 != 0 || yPt2 !=0)
            {
                if(lineAdd == true)
                {
                    l = new LineEntry(xPt,yPt,xPt2,yPt2);
                    lineAdd = false;
                    printLine[3] = true;
                    resetValues();
                }
            }
        }
        if(rect == true){
            if(xPt2 != 0 || yPt2 !=0){
                if(rectAdd == true)
                {
                    r = new LineEntry(xPt,yPt,xPt2,yPt2);
                    rectAdd = false;
                    printRect[3] = true;
                    resetValues();
                }
            }
        }
        if(ellipse == true){
            if(xPt2 != 0 || yPt2 !=0){
                 if(ellipseAdd == true)
                {
                    e = new LineEntry(xPt,yPt,xPt2,yPt2);
                    ellipseAdd = false;
                    printEllipse[3] = true;
                    resetValues();
                 }
            }
        }
        if(curve == true){
                if(curveAdd == true){
                    if(afterPt3 == true){
                        if(xf != 0 || yf != 0){
                        c = new LineEntry(xf,yf,xPt2,yPt2,xPt3,yPt3);
                        curveAdd = false;
                        printCurve[3] = true;
                        resetValues();
                        }
                    }
                }
        }
        paintPanel.repaint();
    }//GEN-LAST:event_p4MouseClicked

    private void p5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_p5MouseClicked
        System.out.println("p5 click");
        
        int x,y;
        x = evt.getX();
        y = evt.getY();
        if( set == true)
        {
            xPt = evt.getX();
            yPt = evt.getY();
            set = false;
            if(afterPt2 == false){
                xf = xPt;
                yf = yPt;
            }
            else if(afterPt2 == true){
                xPt3 = x;
                yPt3 = y;
                afterPt3 = true;
            }
        }
        else
        {
            xPt2 = evt.getX();
            yPt2 = evt.getY();
            set = true;
            afterPt2 = true;
        }
        if(string == true){
           if(stringAdd == true)
           {
             s = new LineEntry(x,y,0,0);
            stringAdd = false;
            printString[4] = true;
            resetValues();
            }
        }
        if(line == true ){
            if(xPt2 != 0 || yPt2 !=0)
            {
                if(lineAdd == true)
                {
                    l = new LineEntry(xPt,yPt,xPt2,yPt2);
                    lineAdd = false;
                    printLine[4] = true;
                    resetValues();
                }
            }
        }
        if(rect == true){
            if(xPt2 != 0 || yPt2 !=0){
                if(rectAdd == true)
                {
                    r = new LineEntry(xPt,yPt,xPt2,yPt2);
                    rectAdd = false;
                    printRect[4] = true;
                    resetValues();
                }
            }
        }
        if(ellipse == true){
            if(xPt2 != 0 || yPt2 !=0){
                 if(ellipseAdd == true)
                {
                    e = new LineEntry(xPt,yPt,xPt2,yPt2);
                    ellipseAdd = false;
                    printEllipse[4] = true;
                    resetValues();
                 }
            }
        }
        if(curve == true){
                if(curveAdd == true){
                    if(afterPt3 == true){
                        if(xf != 0 || yf != 0){
                        c = new LineEntry(xf,yf,xPt2,yPt2,xPt3,yPt3);
                        curveAdd = false;
                        printCurve[4] = true;
                        resetValues();
                        }
                    }
                }
        }
        paintPanel.repaint();
    }//GEN-LAST:event_p5MouseClicked

    private void p6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_p6MouseClicked
        System.out.println("p6 click");
        
        int x,y;
        x = evt.getX();
        y = evt.getY();
        if( set == true)
        {
            xPt = evt.getX();
            yPt = evt.getY();
            set = false;
            if(afterPt2 == false){
                xf = xPt;
                yf = yPt;
            }
            else if(afterPt2 == true){
                xPt3 = x;
                yPt3 = y;
                afterPt3 = true;
            }
        }
        else
        {
            xPt2 = evt.getX();
            yPt2 = evt.getY();
            set = true;
            afterPt2 = true;
        }
        if(string == true){
           if(stringAdd == true)
           {
             s = new LineEntry(x,y,0,0);
            stringAdd = false;
            printString[5] = true;
            resetValues();
            }
        }
        if(line == true ){
            if(xPt2 != 0 || yPt2 !=0)
            {
                if(lineAdd == true)
                {
                    l = new LineEntry(xPt,yPt,xPt2,yPt2);
                    lineAdd = false;
                    printLine[5] = true;
                    resetValues();
                }
            }
        }
        if(rect == true){
            if(xPt2 != 0 || yPt2 !=0){
                if(rectAdd == true)
                {
                    r = new LineEntry(xPt,yPt,xPt2,yPt2);
                    rectAdd = false;
                    printRect[5] = true;
                    resetValues();
                }
            }
        }
        if(ellipse == true){
            if(xPt2 != 0 || yPt2 !=0){
                 if(ellipseAdd == true)
                {
                    e = new LineEntry(xPt,yPt,xPt2,yPt2);
                    ellipseAdd = false;
                    printEllipse[5] = true;
                    resetValues();
                 }
            }
        }
        if(curve == true){
                if(curveAdd == true){
                    if(afterPt3 == true){
                        if(xf != 0 || yf != 0){
                        c = new LineEntry(xf,yf,xPt2,yPt2,xPt3,yPt3);
                        curveAdd = false;
                        printCurve[5] = true;
                        resetValues();
                        }
                    }
                }
        }
        paintPanel.repaint();
    }//GEN-LAST:event_p6MouseClicked

    private void p7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_p7MouseClicked
        System.out.println("p7 click");
        
        int x,y;
        x = evt.getX();
        y = evt.getY();
        if( set == true)
        {
            xPt = evt.getX();
            yPt = evt.getY();
            set = false;
            if(afterPt2 == false){
                xf = xPt;
                yf = yPt;
            }
            else if(afterPt2 == true){
                xPt3 = x;
                yPt3 = y;
                afterPt3 = true;
            }
        }
        else
        {
            xPt2 = evt.getX();
            yPt2 = evt.getY();
            set = true;
            afterPt2 = true;
        }
        if(string == true){
           if(stringAdd == true)
           {
             s = new LineEntry(x,y,0,0);
            stringAdd = false;
            printString[6] = true;
            resetValues();
            }
        }
        if(line == true ){
            if(xPt2 != 0 || yPt2 !=0)
            {
                if(lineAdd == true)
                {
                    l = new LineEntry(xPt,yPt,xPt2,yPt2);
                    lineAdd = false;
                    printLine[6] = true;
                    resetValues();
                }
            }
        }
        if(rect == true){
            if(xPt2 != 0 || yPt2 !=0){
                if(rectAdd == true)
                {
                    r = new LineEntry(xPt,yPt,xPt2,yPt2);
                    rectAdd = false;
                    printRect[6] = true;
                    resetValues();

                }
            }
        }
        if(ellipse == true){
            if(xPt2 != 0 || yPt2 !=0){
                 if(ellipseAdd == true)
                {
                    e = new LineEntry(xPt,yPt,xPt2,yPt2);
                    ellipseAdd = false;
                    printEllipse[6] = true;
                    resetValues();
                 }
            }
        }
        if(curve == true){
                if(curveAdd == true){
                    if(afterPt3 == true){
                        if(xf != 0 || yf != 0){
                        c = new LineEntry(xf,yf,xPt2,yPt2,xPt3,yPt3);
                        curveAdd = false;
                        printCurve[6] = true;
                        resetValues();
                        }
                    }
                }
        }
        paintPanel.repaint();
    }//GEN-LAST:event_p7MouseClicked

    private void p8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_p8MouseClicked
        System.out.println("p8 click");
        
        int x,y;
        x = evt.getX();
        y = evt.getY();
        if( set == true)
        {
            xPt = evt.getX();
            yPt = evt.getY();
            set = false;
            if(afterPt2 == false){
                xf = xPt;
                yf = yPt;
            }
            else if(afterPt2 == true){
                xPt3 = x;
                yPt3 = y;
                afterPt3 = true;
            }
        }
        else
        {
            xPt2 = evt.getX();
            yPt2 = evt.getY();
            set = true;
            afterPt2 = true;
        }
        if(string == true){
           if(stringAdd == true)
           {
             s = new LineEntry(x,y,0,0);
            stringAdd = false;
            printString[7] = true;
            resetValues();
            }
        }
        if(line == true ){
            if(xPt2 != 0 || yPt2 !=0)
            {
                if(lineAdd == true)
                {
                    l = new LineEntry(xPt,yPt,xPt2,yPt2);
                    lineAdd = false;
                    printLine[7] = true;
                    resetValues();
                }
            }
        }
        if(rect == true){
            if(xPt2 != 0 || yPt2 !=0){
                if(rectAdd == true)
                {
                    r = new LineEntry(xPt,yPt,xPt2,yPt2);
                    rectAdd = false;
                    printRect[7] = true;
                    resetValues();

                }
            }
        }
        if(ellipse == true){
            if(xPt2 != 0 || yPt2 !=0){
                 if(ellipseAdd == true)
                {
                    e = new LineEntry(xPt,yPt,xPt2,yPt2);
                    ellipseAdd = false;
                    printEllipse[7] = true;
                    resetValues();
                 }
            }
        }
        if(curve == true){
                if(curveAdd == true){
                    if(afterPt3 == true){
                        if(xf != 0 || yf != 0){
                        c = new LineEntry(xf,yf,xPt2,yPt2,xPt3,yPt3);
                        curveAdd = false;
                        printCurve[7] = true;
                        resetValues();
                        }
                    }
                }
        }
        paintPanel.repaint();
    }//GEN-LAST:event_p8MouseClicked

    private void p9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_p9MouseClicked
        System.out.println("p9 click");
        
        int x,y;
        x = evt.getX();
        y = evt.getY();
        if( set == true)
        {
            xPt = evt.getX();
            yPt = evt.getY();
            set = false;
            if(afterPt2 == false){
                xf = xPt;
                yf = yPt;
            }
            else if(afterPt2 == true){
                xPt3 = x;
                yPt3 = y;
                afterPt3 = true;
            }
        }
        else
        {
            xPt2 = evt.getX();
            yPt2 = evt.getY();
            set = true;
            afterPt2 = true;
        }
        if(string == true){
           if(stringAdd == true)
           {
             s = new LineEntry(x,y,0,0);
            stringAdd = false;
            printString[8] = true;
            resetValues();
            }
        }
        if(line == true ){
            if(xPt2 != 0 || yPt2 !=0)
            {
                if(lineAdd == true)
                {
                    l = new LineEntry(xPt,yPt,xPt2,yPt2);
                    lineAdd = false;
                    printLine[8] = true;
                    resetValues();
                }
            }
        }
        if(rect == true){
            if(xPt2 != 0 || yPt2 !=0){
                if(rectAdd == true)
                {
                    r = new LineEntry(xPt,yPt,xPt2,yPt2);
                    rectAdd = false;
                    printRect[8] = true;
                    resetValues();

                }
            }
        }
        if(ellipse == true){
            if(xPt2 != 0 || yPt2 !=0){
                 if(ellipseAdd == true)
                {
                    e = new LineEntry(xPt,yPt,xPt2,yPt2);
                    ellipseAdd = false;
                    printEllipse[8] = true;
                    resetValues();
                 }
            }
        }
        if(curve == true){
                if(curveAdd == true){
                    if(afterPt3 == true){
                        if(xf != 0 || yf != 0){
                        c = new LineEntry(xf,yf,xPt2,yPt2,xPt3,yPt3);
                        curveAdd = false;
                        printCurve[8] = true;
                        resetValues();
                        }
                    }
                }
        }
        paintPanel.repaint();
    }//GEN-LAST:event_p9MouseClicked

    private void rectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rectButtonActionPerformed
         if(rect == true)
        {
             resetValues();
             JOptionPane.showMessageDialog(null, "Rectangle in-print is now deleted.");
            rect = false;
            for(int i = 0;i<10;i++){
                printRect[i] = false;
            }
            paintPanel.repaint();
        }
        else
        {
             resetValues();
            rect = true;
            rectAdd = true;
        }
    }//GEN-LAST:event_rectButtonActionPerformed

    private void curveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_curveButtonActionPerformed
         if(curve == true)
        {
             JOptionPane.showMessageDialog(null, "Curve in-print is now deleted.");
             resetValues();
             afterPt2 = false;
             afterPt3 = true;
             curve = false;
            for(int i = 0;i<10;i++){
                printCurve[i] = false;
            }
            paintPanel.repaint();
        }
        else
        {
            resetValues();
            curve = true;
            curveAdd = true;
        }
    }//GEN-LAST:event_curveButtonActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        textButtonActionPerformed(evt);
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        lineButtonActionPerformed(evt);
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        ellipseButtonActionPerformed(evt);
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
       rectButtonActionPerformed(evt);
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
       curveButtonActionPerformed(evt);
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        JOptionPane.showMessageDialog(null, "Timothy L. Monh\n#007656116\nGraphicsBlockDesignToolApplication\nWinter 2010" +
                "\ntlmonh@csupomona.edu\nThis program was created to demonstrate a way of printing elements on panels.");
    }//GEN-LAST:event_jMenuItem11ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        JOptionPane.showMessageDialog(null, "General Help\nText Button - click once to input text and \n" +
                "click on one of the panels to paint on the text. Click again to erase." +
                "\nLine Button - Click to create one endpoint of the line on a panel and create another endpoint\n" +
                "of the line on a panel as well. A line is created once two points are chosen. Click button again to\n" +
                "erase." +
                "\nEllipse Button - Click to create one endpoint of the oval and to create an endpoint that decides the\n" +
                "radius of the oval. Click button again to erase." +
                "\nRect Button- Click to create one starting point and another point to decide the size of the rectangle.\n" +
                "Click button again to erase." +
                "\nCurve Button - Click to create 3 endpoints which create a bezier curve. Click button again to erase" +
                "\nClose Button - Exits the program.");
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_exitButtonActionPerformed

    private void jMenu3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu3ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        job = PrinterJob.getPrinterJob();
        pf = job.defaultPage();

        job.setPrintable(new PrintGUI(this), pf);

        if(job.printDialog()){
            try {
                job.print();
            } catch (PrinterException ex) {
                Logger.getLogger(WorkFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
       PrinterJob job = PrinterJob.getPrinterJob();
//      job.setPrintable((Printable) new MyPrinterClass());

        PageFormat pf = job.defaultPage();
        pf = job.pageDialog(pf);
        job.setPrintable(new PrintClass(mainPanel),pf);

        if(job.printDialog()){
            try {
                job.print();
            } catch (PrinterException ex) {
                Logger.getLogger(WorkFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void PageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PageButtonActionPerformed
        job = PrinterJob.getPrinterJob();
        if(pf == null){
            pf = job.defaultPage();
        }
        pf = job.pageDialog(pf);
    }//GEN-LAST:event_PageButtonActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                theApp = new WorkFrame();
                theApp.center();
                theApp.setVisible(true);
                //new WorkFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem PageButton;
    private javax.swing.JButton curveButton;
    private javax.swing.JButton ellipseButton;
    private javax.swing.JButton exitButton;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JButton lineButton;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JPanel p1;
    private javax.swing.JPanel p2;
    private javax.swing.JPanel p3;
    private javax.swing.JPanel p4;
    private javax.swing.JPanel p5;
    private javax.swing.JPanel p6;
    private javax.swing.JPanel p7;
    private javax.swing.JPanel p8;
    private javax.swing.JPanel p9;
    private javax.swing.JLayeredPane paintPanel;
    private javax.swing.JButton rectButton;
    private javax.swing.JButton textButton;
    // End of variables declaration//GEN-END:variables

}
